<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership. The
    ASF licenses this file to You under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance with the
    License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable
    law or agreed to in writing, software distributed under the License is
    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the specific
    language governing permissions and limitations under the License.
-->

<!-- $Rev: 684173 $ $Date: 2008-08-08 20:13:24 -0700 (Fri, 08 Aug 2008) $ -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.superbiz</groupId>
  <artifactId>webservice-ws-security</artifactId>
  <packaging>jar</packaging>
  <version>1.1-SNAPSHOT</version>
  <name>OpenEJB :: Web Examples :: EJB WebService with WS-Security</name>
  <properties>
    <!--
       - http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding
       -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>javaee-api</artifactId>
      <version>5.0-2</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>openejb-client</artifactId>
      <version>3.1.2</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>openejb-core</artifactId>
      <version>3.1.2</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>openejb-cxf</artifactId>
      <version>3.1.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.6.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <defaultGoal>install</defaultGoal>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          <jdk>1.5</jdk>
          <excludes>
            <exclude>**/package-info.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>site</id>
            <phase>pre-site</phase>
            <goals>
              <goal>instrument</goal>
              <goal>aggregate</goal>
              <goal>save-history</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <id>generate-keys</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks name="generate keys">
                <property name="server.alias" value="serveralias"/>
                <property name="server.keypass" value="serverPassword"/>
                <property name="server.keystore" value="${basedir}/target/classes/META-INF/serverStore.jks"/>
                <property name="server.storepass" value="keystorePass"/>
                <property name="server.dname" value="'cn=serveralias'"/>
                <property name="server.file" value="${basedir}/target/classes/META-INF/serverKey.rsa"/>

                <property name="client.alias" value="clientalias"/>
                <property name="client.keypass" value="clientPassword"/>
                <property name="client.keystore" value="${basedir}/target/test-classes/META-INF/clientStore.jks"/>
                <property name="client.storepass" value="keystorePass"/>
                <property name="client.dname" value="'cn=clientalias'"/>
                <property name="client.file" value="${basedir}/target/test-classes/META-INF/clientKey.rsa"/>

                <property name="keyalg" value="RSA"/>

                <echo message="generate server keys"/>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-genkey"/>
                  <arg line="-alias ${server.alias}"/>
                  <arg line="-keypass ${server.keypass}"/>
                  <arg line="-keystore ${server.keystore}"/>
                  <arg line="-storepass ${server.storepass}"/>
                  <arg line="-dname ${server.dname}"/>
                  <arg line="-keyalg ${keyalg}"/>
                </java>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-selfcert"/>
                  <arg line="-alias ${server.alias}"/>
                  <arg line="-keystore ${server.keystore}"/>
                  <arg line="-storepass ${server.storepass}"/>
                  <arg line="-keypass ${server.keypass}"/>
                </java>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-export"/>
                  <arg line="-alias ${server.alias}"/>
                  <arg line="-file ${server.file}"/>
                  <arg line="-keystore ${server.keystore}"/>
                  <arg line="-storepass ${server.storepass}"/>
                </java>

                <echo message="generate client keys"/>

                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-genkey"/>
                  <arg line="-alias ${client.alias}"/>
                  <arg line="-keypass ${client.keypass}"/>
                  <arg line="-keystore ${client.keystore}"/>
                  <arg line="-storepass ${client.storepass}"/>
                  <arg line="-dname ${client.dname}"/>
                  <arg line="-keyalg ${keyalg}"/>
                </java>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-selfcert"/>
                  <arg line="-alias ${client.alias}"/>
                  <arg line="-keystore ${client.keystore}"/>
                  <arg line="-storepass ${client.storepass}"/>
                  <arg line="-keypass ${client.keypass}"/>
                </java>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-export"/>
                  <arg line="-alias ${client.alias}"/>
                  <arg line="-file ${client.file}"/>
                  <arg line="-keystore ${client.keystore}"/>
                  <arg line="-storepass ${client.storepass}"/>
                </java>

                <echo message="import client/server public keys in client/server keystores"/>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-import"/>
                  <arg line="-alias ${server.alias}"/>
                  <arg line="-file ${server.file}"/>
                  <arg line="-keystore ${client.keystore}"/>
                  <arg line="-storepass ${client.storepass}"/>
                  <arg line="-noprompt"/>
                </java>
                <java classname="sun.security.tools.KeyTool" fork="true">
                  <arg line="-import"/>
                  <arg line="-alias ${client.alias}"/>
                  <arg line="-file ${client.file}"/>
                  <arg line="-keystore ${server.keystore}"/>
                  <arg line="-storepass ${server.storepass}"/>
                  <arg line="-noprompt"/>
                </java>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <!--
  This section allows you to configure where to publish libraries for sharing.
  It is not required and may be deleted.  For more information see:
  http://maven.apache.org/plugins/maven-deploy-plugin/
  -->
  <distributionManagement>
    <repository>
      <id>localhost</id>
      <url>file://${basedir}/target/repo/</url>
    </repository>
    <snapshotRepository>
      <id>localhost</id>
      <url>file://${basedir}/target/snapshot-repo/</url>
    </snapshotRepository>
  </distributionManagement>

</project>
